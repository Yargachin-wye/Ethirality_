//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Data/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""PlayerMovable"",
            ""id"": ""e39eb2ea-844d-4c20-8c84-97eb4831a0a4"",
            ""actions"": [
                {
                    ""name"": ""Joystick"",
                    ""type"": ""Value"",
                    ""id"": ""c8331030-b478-4329-b087-c4bce8d02b61"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone(min=0.02,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftButton"",
                    ""type"": ""Button"",
                    ""id"": ""fc91e788-e5eb-4b6c-a8dd-c46f45f2e830"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ScreenPosition"",
                    ""type"": ""Value"",
                    ""id"": ""486cc4a7-9ee8-4279-a34e-f0a0e33dde91"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d7162890-6b87-4508-9caf-7c3e3f224190"",
                    ""path"": ""<AndroidJoystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""600640de-a591-4333-887f-b5c648069939"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""efeb2749-889a-4f05-ac29-d2f8f28c4961"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ScreenPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b2f1a68-c4b0-4fc6-b91b-d720290fc7af"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a165a9c4-0003-4926-aec8-a55cf45af4ca"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovable
        m_PlayerMovable = asset.FindActionMap("PlayerMovable", throwIfNotFound: true);
        m_PlayerMovable_Joystick = m_PlayerMovable.FindAction("Joystick", throwIfNotFound: true);
        m_PlayerMovable_LeftButton = m_PlayerMovable.FindAction("LeftButton", throwIfNotFound: true);
        m_PlayerMovable_ScreenPosition = m_PlayerMovable.FindAction("ScreenPosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovable
    private readonly InputActionMap m_PlayerMovable;
    private List<IPlayerMovableActions> m_PlayerMovableActionsCallbackInterfaces = new List<IPlayerMovableActions>();
    private readonly InputAction m_PlayerMovable_Joystick;
    private readonly InputAction m_PlayerMovable_LeftButton;
    private readonly InputAction m_PlayerMovable_ScreenPosition;
    public struct PlayerMovableActions
    {
        private @Controls m_Wrapper;
        public PlayerMovableActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Joystick => m_Wrapper.m_PlayerMovable_Joystick;
        public InputAction @LeftButton => m_Wrapper.m_PlayerMovable_LeftButton;
        public InputAction @ScreenPosition => m_Wrapper.m_PlayerMovable_ScreenPosition;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovable; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovableActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovableActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovableActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovableActionsCallbackInterfaces.Add(instance);
            @Joystick.started += instance.OnJoystick;
            @Joystick.performed += instance.OnJoystick;
            @Joystick.canceled += instance.OnJoystick;
            @LeftButton.started += instance.OnLeftButton;
            @LeftButton.performed += instance.OnLeftButton;
            @LeftButton.canceled += instance.OnLeftButton;
            @ScreenPosition.started += instance.OnScreenPosition;
            @ScreenPosition.performed += instance.OnScreenPosition;
            @ScreenPosition.canceled += instance.OnScreenPosition;
        }

        private void UnregisterCallbacks(IPlayerMovableActions instance)
        {
            @Joystick.started -= instance.OnJoystick;
            @Joystick.performed -= instance.OnJoystick;
            @Joystick.canceled -= instance.OnJoystick;
            @LeftButton.started -= instance.OnLeftButton;
            @LeftButton.performed -= instance.OnLeftButton;
            @LeftButton.canceled -= instance.OnLeftButton;
            @ScreenPosition.started -= instance.OnScreenPosition;
            @ScreenPosition.performed -= instance.OnScreenPosition;
            @ScreenPosition.canceled -= instance.OnScreenPosition;
        }

        public void RemoveCallbacks(IPlayerMovableActions instance)
        {
            if (m_Wrapper.m_PlayerMovableActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovableActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovableActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovableActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovableActions @PlayerMovable => new PlayerMovableActions(this);
    public interface IPlayerMovableActions
    {
        void OnJoystick(InputAction.CallbackContext context);
        void OnLeftButton(InputAction.CallbackContext context);
        void OnScreenPosition(InputAction.CallbackContext context);
    }
}
