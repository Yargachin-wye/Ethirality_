//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Data/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""PlayerMovable"",
            ""id"": ""e39eb2ea-844d-4c20-8c84-97eb4831a0a4"",
            ""actions"": [
                {
                    ""name"": ""Joystick"",
                    ""type"": ""Value"",
                    ""id"": ""c8331030-b478-4329-b087-c4bce8d02b61"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone(min=0.05,max=1)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchScreenPc"",
                    ""type"": ""Value"",
                    ""id"": ""fc91e788-e5eb-4b6c-a8dd-c46f45f2e830"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchScreenMobile"",
                    ""type"": ""Value"",
                    ""id"": ""7b0a82af-582f-41fb-ac08-80869e4ffb69"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DetouchScreenMobile"",
                    ""type"": ""Button"",
                    ""id"": ""85a2bc11-8579-40f6-aaa7-b4d4824f669a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d7162890-6b87-4508-9caf-7c3e3f224190"",
                    ""path"": ""<AndroidJoystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""affc4a3b-ae04-4c1a-9be8-ed812c2da520"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchScreenPc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""600640de-a591-4333-887f-b5c648069939"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchScreenMobile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08f6fb03-5ec4-47d2-96fd-8ef6141b6a4e"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DetouchScreenMobile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovable
        m_PlayerMovable = asset.FindActionMap("PlayerMovable", throwIfNotFound: true);
        m_PlayerMovable_Joystick = m_PlayerMovable.FindAction("Joystick", throwIfNotFound: true);
        m_PlayerMovable_TouchScreenPc = m_PlayerMovable.FindAction("TouchScreenPc", throwIfNotFound: true);
        m_PlayerMovable_TouchScreenMobile = m_PlayerMovable.FindAction("TouchScreenMobile", throwIfNotFound: true);
        m_PlayerMovable_DetouchScreenMobile = m_PlayerMovable.FindAction("DetouchScreenMobile", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovable
    private readonly InputActionMap m_PlayerMovable;
    private List<IPlayerMovableActions> m_PlayerMovableActionsCallbackInterfaces = new List<IPlayerMovableActions>();
    private readonly InputAction m_PlayerMovable_Joystick;
    private readonly InputAction m_PlayerMovable_TouchScreenPc;
    private readonly InputAction m_PlayerMovable_TouchScreenMobile;
    private readonly InputAction m_PlayerMovable_DetouchScreenMobile;
    public struct PlayerMovableActions
    {
        private @Controls m_Wrapper;
        public PlayerMovableActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Joystick => m_Wrapper.m_PlayerMovable_Joystick;
        public InputAction @TouchScreenPc => m_Wrapper.m_PlayerMovable_TouchScreenPc;
        public InputAction @TouchScreenMobile => m_Wrapper.m_PlayerMovable_TouchScreenMobile;
        public InputAction @DetouchScreenMobile => m_Wrapper.m_PlayerMovable_DetouchScreenMobile;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovable; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovableActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerMovableActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerMovableActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerMovableActionsCallbackInterfaces.Add(instance);
            @Joystick.started += instance.OnJoystick;
            @Joystick.performed += instance.OnJoystick;
            @Joystick.canceled += instance.OnJoystick;
            @TouchScreenPc.started += instance.OnTouchScreenPc;
            @TouchScreenPc.performed += instance.OnTouchScreenPc;
            @TouchScreenPc.canceled += instance.OnTouchScreenPc;
            @TouchScreenMobile.started += instance.OnTouchScreenMobile;
            @TouchScreenMobile.performed += instance.OnTouchScreenMobile;
            @TouchScreenMobile.canceled += instance.OnTouchScreenMobile;
            @DetouchScreenMobile.started += instance.OnDetouchScreenMobile;
            @DetouchScreenMobile.performed += instance.OnDetouchScreenMobile;
            @DetouchScreenMobile.canceled += instance.OnDetouchScreenMobile;
        }

        private void UnregisterCallbacks(IPlayerMovableActions instance)
        {
            @Joystick.started -= instance.OnJoystick;
            @Joystick.performed -= instance.OnJoystick;
            @Joystick.canceled -= instance.OnJoystick;
            @TouchScreenPc.started -= instance.OnTouchScreenPc;
            @TouchScreenPc.performed -= instance.OnTouchScreenPc;
            @TouchScreenPc.canceled -= instance.OnTouchScreenPc;
            @TouchScreenMobile.started -= instance.OnTouchScreenMobile;
            @TouchScreenMobile.performed -= instance.OnTouchScreenMobile;
            @TouchScreenMobile.canceled -= instance.OnTouchScreenMobile;
            @DetouchScreenMobile.started -= instance.OnDetouchScreenMobile;
            @DetouchScreenMobile.performed -= instance.OnDetouchScreenMobile;
            @DetouchScreenMobile.canceled -= instance.OnDetouchScreenMobile;
        }

        public void RemoveCallbacks(IPlayerMovableActions instance)
        {
            if (m_Wrapper.m_PlayerMovableActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerMovableActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerMovableActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerMovableActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerMovableActions @PlayerMovable => new PlayerMovableActions(this);
    public interface IPlayerMovableActions
    {
        void OnJoystick(InputAction.CallbackContext context);
        void OnTouchScreenPc(InputAction.CallbackContext context);
        void OnTouchScreenMobile(InputAction.CallbackContext context);
        void OnDetouchScreenMobile(InputAction.CallbackContext context);
    }
}
